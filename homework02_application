//******************************************************************************
// Copyright (C) 2016-2019 University of Oklahoma Board of Trustees.
//******************************************************************************
// Last modified: Sun Feb  2 17:56:41 2020 by Chris Weaver
//******************************************************************************
// Major Modification History:
//
// 20160209 [weaver]:	Original file.
// 20190129 [weaver]:	Updated to JOGL 2.3.2 and cleaned up.
// 20190203 [weaver]:	Additional cleanup and more extensive comments.
// 20190206 [weaver]:	Heavily reduced version of old Homework 02 solution.
// 20200121 [weaver]:	Modified to set up OpenGL and UI on the Swing thread.
//
//******************************************************************************
// Notes:
//
// Warning! This code uses deprecated features of OpenGL, including immediate
// mode vertex attribute specification, for sake of easier classroom learning.
// See www.khronos.org/opengl/wiki/Legacy_OpenGL
//
//******************************************************************************

package edu.ou.cs.cg.assignment.homework02;

//import java.lang.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.geom.*;
import java.util.*;
import javax.swing.*;
import com.jogamp.opengl.*;
import com.jogamp.opengl.awt.GLCanvas;
import com.jogamp.opengl.glu.*;
import com.jogamp.opengl.util.*;
import com.jogamp.opengl.util.awt.TextRenderer;
import com.jogamp.opengl.util.gl2.GLUT;

//******************************************************************************

/**
 * The <CODE>Application</CODE> class.<P>
 *
 * @author  Chris Weaver
 * @author  Tony Nguyen
 * @version %I%, %G%
 */
public final class Application
	implements GLEventListener, Runnable
{
	//**********************************************************************
	// Public Class Members
	//**********************************************************************

	public static final GLU	GLU = new GLU();
	public static final GLUT	GLUT = new GLUT();
	public static final Random	RANDOM = new Random();

	//**********************************************************************
	// Private Members
	//**********************************************************************

	// State (internal) variables
	private int				w;				// Canvas width
	private int				h;				// Canvas height
	private int				k = 0;			// Animation counter
	private TextRenderer	renderer;

	private float			thickline;		// Line thickness

	//**********************************************************************
	// Main
	//**********************************************************************

	public static void	main(String[] args)
	{
		SwingUtilities.invokeLater(new Application(args));
	}

	//**********************************************************************
	// Constructors and Finalizer
	//**********************************************************************

	public Application(String[] args)
	{
	}

	//**********************************************************************
	// Override Methods (Runnable)
	//**********************************************************************

	public void	run()
	{
		GLProfile		profile = GLProfile.getDefault();
		GLCapabilities	capabilities = new GLCapabilities(profile);
		GLCanvas		canvas = new GLCanvas(capabilities);	// Single-buffer
		//GLJPanel		canvas = new GLJPanel(capabilities);	// Double-buffer
		JFrame			frame = new JFrame("The World");

		// Specify the starting width and height of the canvas itself
		canvas.setPreferredSize(new Dimension(1280, 720));

		// Populate and show the frame
		frame.setBounds(50, 50, 200, 200);
		frame.getContentPane().add(canvas);
		frame.pack();
		frame.setVisible(true);
		frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

		// Exit when the user clicks the frame's close button
		frame.addWindowListener(new WindowAdapter() {
				public void windowClosing(WindowEvent e) {
					System.exit(0);
				}
			});

		// Register this class to update whenever OpenGL needs it
		canvas.addGLEventListener(this);

		// Have OpenGL call display() to update the canvas 60 times per second
		FPSAnimator	animator = new FPSAnimator(canvas, 60);

		animator.start();
	}

	//**********************************************************************
	// Override Methods (GLEventListener)
	//**********************************************************************

	// Called immediately after the GLContext of the GLCanvas is initialized.
	public void	init(GLAutoDrawable drawable)
	{
		w = drawable.getSurfaceWidth();
		h = drawable.getSurfaceHeight();

		renderer = new TextRenderer(new Font("Serif", Font.PLAIN, 18),
									true, true);

		initPipeline(drawable);
	}

	// Notification to release resources for the GLContext.
	public void	dispose(GLAutoDrawable drawable)
	{
		renderer = null;
	}

	// Called to initiate rendering of each frame into the GLCanvas.
	public void	display(GLAutoDrawable drawable)
	{
		update(drawable);
		render(drawable);
	}

	// Called during the first repaint after a resize of the GLCanvas.
	public void	reshape(GLAutoDrawable drawable, int x, int y, int w, int h)
	{
		this.w = w;
		this.h = h;
	}

	//**********************************************************************
	// Private Methods (Rendering)
	//**********************************************************************

	// Update the scene model for the current animation frame.
	private void	update(GLAutoDrawable drawable)
	{
		k++;									// Advance animation counter
	}

	// Render the scene model and display the current animation frame.
	private void	render(GLAutoDrawable drawable)
	{
		GL2	gl = drawable.getGL().getGL2();
		gl.glClear(GL.GL_COLOR_BUFFER_BIT);		    // Clear the buffer.
		
		// Background galaxy.
		setProjectionGalaxy(gl);
		setColor(gl, 172, 172, 172);
		drawLorenzAttractor(gl);
		
		setProjection(gl);							// Use screen coordinates.

		// Two houses.
		drawHouse1(gl);
		drawHouse2(gl);
		
		// Draw fences
		drawFences(gl);
		
		// Create the grass.
		drawGrass(gl);
		
		// Draws a moon using door knob circle method.
		drawDoorKnob(gl, 1048, 600, 60, 235, 235, 235);
		// This will make the moon a crescent shape.
		drawDoorKnob(gl, 1070, 620, 60, 0, 0, 0);
		
		// Draws a flag pole with a flag and ropes.
		drawFlag(gl, 600, 469, 185, 110, 255, 255, 255);
	}

	//**********************************************************************
	// Private Methods (Pipeline)
	//**********************************************************************

	// www.khronos.org/registry/OpenGL-Refpages/es2.0/xhtml/glBlendFunc.xml
	private void	initPipeline(GLAutoDrawable drawable)
	{
		GL2	gl = drawable.getGL().getGL2();

		// See com.jogamp.opengl.GL
		//gl.glEnable(GL2.GL_POINT_SMOOTH);	// Turn on point anti-aliasing
	}

	// Position and orient the default camera to view in 2-D, in pixel coords.
	private void	setProjection(GL2 gl)
	{
		// Main part of the scene.
		GLU	glu = new GLU();

		gl.glMatrixMode(GL2.GL_PROJECTION);		     // Prepare for matrix xform
		gl.glLoadIdentity();						 // Set to identity matrix
		glu.gluOrtho2D(0.0f, 1280.0f, 0.0f, 720.0f); // 2D translate and scale
	}
	
	// Position and orient the default camera to view in 2-D, in pixel coords.
	private void	setProjectionGalaxy(GL2 gl)
	{
		GLU galaxy = new GLU();
			
		gl.glMatrixMode(GL2.GL_PROJECTION);
		gl.glLoadIdentity();
		galaxy.gluOrtho2D(-1.0f, 1.0f, -1.0f, 1.0f);
	}

	//**********************************************************************
	// Private Methods (Scene)
	//**********************************************************************

	// Warning! Text is drawn in unprojected canvas/viewport coordinates.
	// For more on text rendering, the example on this page is long but helpful:
	// jogamp.org/jogl-demos/src/demos/j2d/FlyingText.java
	private void	drawText(GLAutoDrawable drawable)
	{
		renderer.beginRendering(w, h);
		renderer.setColor(0.75f, 0.75f, 0.75f, 1.0f);
		renderer.draw("The Friendly Night Sky Neighborhood", 2, h - 14);
		renderer.endRendering();
	}
	
	// These pages are helpful:
	// en.wikipedia.org/wiki/Lorenz_system
	// www.algosome.com/articles/lorenz-attractor-programming-code.html
	private void	drawLorenzAttractor(GL2 gl)
	{
		gl.glBegin(GL.GL_POINTS);				// Start specifying points

		double		dt = 0.01;					// Integration step size
		double		sigma = 10.0;				// Constant for updating x
		double		rho = 28.0;				// Constant for updating y
		double		beta = 8.0 / 3.0;			// Constant for updating z
		double		lx = 5.0;					// Initial x coordinate
		double		ly = 1.0;					// Initial y coordinate
		double		lz = 0.0;					// Initial z coordinate

		for (int i = 0; i < 9000; i++)
		{
			double	llx = lx + dt * sigma * (ly - lx);
			double	lly = ly + dt * (lx * (rho - lz) - ly);
			double	llz = lz + dt * (lx * ly - beta * lz);

			lx = llx;
			ly = lly;
			lz = llz;

			gl.glVertex2d(lx / 70.0, ly / 70.0);
		}

		gl.glEnd();
	}

	// Draw house1 which is the on the left side of the scene.
	private void	drawHouse1(GL2 gl)
	{
		int	dx = 108;
		int	dy = 132;

		// Chimney is on the left side of the house.
		drawChimney(gl, dx + 34, dy, 128, 0, 0);
		// Frame of house.
		drawFrame(gl, dx, dy, 128, 64, 0);
		
		// Window to the left of the door.
		drawWindow(gl, dx + 141, dy + 127, 20, 20, 255, 255, 128);
		
		// Window to the right of the door with shades.
		drawWindow(gl, dx + 34, dy + 127, 20, 20, 255, 255, 128);
		
		// Window shades to the left of the door.
		drawShades(gl, dx + 14, dy + 107, 20, 40, 118, 219, 219, 0);
		drawShades(gl, dx + 33, dy + 107, 20, 40, 118, 219, 219, 1);
		
		// Window shades to the right of the door.
		drawShades(gl, dx + 121, dy + 107, 20, 40, 118, 219, 219, 0);
		drawShades(gl, dx + 140, dy + 107, 20, 40, 118, 219, 219, 1);
		
		// Door is centered of the house.
		drawDoor(gl, dx + 65, dy, 192, 128, 0);
		// Window on the door.
		drawWindow(gl, dx + 85, dy + 65, 15, 15, 255, 255, 128);
		// Door knob on the door.
		drawDoorKnob(gl, dx + 95, dy + 35, 4, 255, 255, 128);
		
		drawStar(gl, dx + 70, dy + 170);
	}

	// Draw the parts of a slightly different house.
	private void	drawHouse2(GL2 gl)
	{
		int	dx = 1048;
		int	dy = 132;

		// Chimney is on the right side of the house.
		drawChimney(gl,	dx + 120, dy, 40, 100, 90);
		// Frame of the house.
		drawFrame(gl, dx, dy, 128, 64, 0);
		// House has a divided roof.
		
		// Windows on the house.
		drawWindow(gl, dx + 98, dy + 64, 20, 20, 225, 225, 128);
		drawWindow(gl, dx + 144, dy + 64, 20, 20, 225, 255, 128);
		
		// Shades on the left window.
		drawShades(gl, dx + 78, dy + 44, 20, 40, 118, 219, 219, 0);
		drawShades(gl, dx + 97, dy + 44, 20, 40, 118, 219, 219, 1);
		
		// Shades on the right window.
		drawShades(gl, dx + 123, dy + 44, 20, 40, 118, 219, 219, 0);
		drawShades(gl, dx + 143, dy + 44, 20, 40, 118, 219, 219, 1);
		
		// Door on the house with a door knob.
		drawDoor(gl, dx + 7, dy, 192, 128, 0);
		drawDoorKnob(gl, dx + 15, dy + 35, 4, 255, 255, 128);
		// Window on the door.
		drawDoorKnob(gl, dx + 25, dy + 70, 15, 255, 255, 128);
		
		drawStar(gl, dx + 68, dy + 170);
	}
	
	/**
	 * Creates the grass in a scene when called.
	 * 
	 * @param gl OpenGL object
	 */
	private void	drawGrass(GL2 gl)
	{
		// Set color and fill the grass.
		setColor(gl, 20, 45, 0);
		fillRect(gl, 0, 0, 1280, 131);		
	}
	
	/**
	 * This method draws a filled circle with an outer edge.
	 * 
	 * @param gl OpenGL object
	 * @param dx X-coordinate
	 * @param dy Y-coordinate
	 * @param r Radius
	 * @param redValue Red color scheme
	 * @param greenValue Green color scheme
	 * @param blueValue Blue color scheme
	 */
	private void	drawDoorKnob(GL2 gl, int dx, int dy, int r, 
			int redValue, int greenValue, int blueValue)
	{
		// Set color and fill the circle.
		setColor(gl, redValue, greenValue, blueValue);
		fillCircle(gl, dx, dy, r);
		
		// Set color and fill the edge of the circle.
		setColor(gl, 0, 0, 0);
		edgeCircle(gl, dx, dy, r);
	}
	
	/**
	 * Draws a flag with a pole and rope.
	 * 
	 * @param gl OpenGL object
	 * @param dx X-coordinate
	 * @param dy Y-coordinate
	 * @param ww Width
	 * @param hh Height
	 * @param redValue Red color scheme
	 * @param greenValue Green color scheme
	 * @param blueValue Blue color scheme
	 */
	private void	drawFlag(GL2 gl, int dx, int dy, int ww, int hh,
			int redValue, int greenValue, int blueValue)
	{
		// Start drawing the flag.
		setColor(gl, redValue, greenValue, blueValue);
		fillRect(gl, dx, dy, ww, hh);
		setColor(gl, 0, 0, 0);
		edgeRect(gl, dx, dy, ww, hh);
		
		drawDoorKnob(gl, dx + 95, dy + 55, 35, 169, 0, 0);
		
		// Draw the flag pole.
		setColor(gl, 117, 117, 117);
		fillRect(gl, 595, 100, 10, 500);
		drawDoorKnob(gl, dx, dy + 140, 15, 178, 166, 0);
		
		// Draw the rope.
		setColor(gl, 203, 149, 0);
		drawRope(gl, 605, 578, 610, 540);
		
		setColor(gl, 203, 149, 0);
		drawRope(gl, 610, 540, 610, 200);
		
		setColor(gl, 203, 149, 0);
		drawRope(gl, 610, 200, 605, 190);
	}
	
	/**
	 * Draws a sequence of connect lines.
	 * 
	 * @param gl OpenGL object
	 * @param x1 Starting x position
	 * @param y1 Starting y position
	 * @param x2 Ending x position
	 * @param y2 Ending y position
	 */
	private void	drawRope(GL2 gl, int x1, int y1, int x2, int y2)
	{
		gl.glLineWidth(2.0f);
		gl.glBegin(GL.GL_LINES);
		
		// Draw lines given points.
		gl.glVertex2d(x1, y1);
		gl.glVertex2d(x2, y2);
		
		gl.glEnd();
	}
	
	/**
	 * Draw shades which are just two triangles.
	 * 
	 * @param gl OpenGL object
	 * @param dx X-coordinate
	 * @param dy Y-coordinate
	 * @param ww Width
	 * @param hh Height
	 * @param redValue Red color scheme
	 * @param greenValue Green color scheme
	 * @param blueValue Blue color scheme
	 * @param rightOrLeft 0 or 1. 0 denotes left while 1 denotes right
	 */
	private void	drawShades(GL2 gl, int dx, int dy, int ww, int hh,
			int redValue, int greenValue, int blueValue, int rightOrLeft)
	{
		// Set color and fill the shades.
		setColor(gl, redValue, greenValue, blueValue);
		fillTriangle(gl, dx, dy, ww, hh, rightOrLeft);
		
		// Black color edge of the shades.
		setColor(gl, 0, 0, 0);
		edgeTriangle(gl, dx, dy, ww, hh, rightOrLeft); 
	}

	/**
	 * Draws a chimney on the scene when called.
	 * 
	 * @param gl OpenGL object
	 * @param dx X-coordinate
	 * @param dy Y-coordinate
	 * @param redValue Red color scheme
	 * @param greenValue Green color scheme
	 * @param blueValue Blue color scheme
	 */
	private void	drawChimney(GL2 gl, int dx, int dy,
			int redValue, int greenValue, int blueValue)
	{
		// Set color and fill the chimney.
		setColor(gl, redValue, greenValue, blueValue);
		fillRect(gl, dx, dy, 30, 250);

		// Black color edge of the chimney.
		setColor(gl, 0, 0, 0);
		edgeRect(gl, dx, dy, 30, 250);
	}
	
	private static final Point[]	OUTLINE_STAR = new Point[]
	{			
		new Point(0, 18),
		new Point(15, 18),
		new Point(18, 0),
		new Point(27, 18),
		new Point(42, 18),
		new Point(33, 27),
		new Point(36, 42),
		new Point(21, 36),
		new Point(6, 42),
		new Point(12, 27)
	};
	
	/**
	 * Draws a standard yellow star.
	 * 
	 * @param gl OpenGL object
	 * @param dx X-Coordinate
	 * @param dy Y-Coordinate
	 */
	private void	drawStar(GL2 gl, int dx, int dy)
	{
		// Set color and fill the star.
		setColor(gl, 255, 255, 4);
		fillPoly(gl, dx, dy, OUTLINE_STAR);

		// Black color edge of the house frame.
		setColor(gl, 0, 0, 0);
		edgePoly(gl, dx, dy, OUTLINE_STAR);
	}

	// Define five corners of a house frame that is shorter on the left side.
	private static final Point[]	OUTLINE_FRAME = new Point[]
	{
		new Point(  0,   0),		// base, left corner
		new Point(176,   0),		// base, right corner
		new Point(176, 162),		// roof, right corner
		new Point( 88, 250),		// roof, apex
		new Point(  0, 162),		// roof, left corner
	};

	/**
	 * Draw a house frame, given its lower left corner.
	 * 
	 * @param gl OpenGL object
	 * @param dx X-coordinate
	 * @param dy Y-coordinate
	 * @param redValue Red color scheme
	 * @param greenValue Green color scheme
	 * @param blueValue Blue color scheme
	 */
	private void	drawFrame(GL2 gl, int dx, int dy,
			int redValue, int greenValue, int blueValue)
	{
		// Set color and fill the house frame.
		setColor(gl, redValue, greenValue, blueValue);
		fillPoly(gl, dx, dy, OUTLINE_FRAME);

		// Black color edge of the house frame.
		setColor(gl, 0, 0, 0);
		edgePoly(gl, dx, dy, OUTLINE_FRAME);
	}

	/**
	 * Draws a door on the scene when called.
	 * 
	 * @param gl OpenGL object
	 * @param dx X-coordinate
	 * @param dy Y-coordinate
	 * @param redValue Red color scheme
	 * @param greenValue Green color scheme
	 * @param blueValue Blue color scheme
	 */
	private void	drawDoor(GL2 gl, int dx, int dy,
			int redValue, int greenValue, int blueValue)
	{	
		// Set color and fill the door.
		setColor(gl, redValue, greenValue, blueValue);
		fillRect(gl, dx, dy, 40, 92);

		// Black color edge of the door.
		setColor(gl, 0, 0, 0);
		edgeRect(gl, dx, dy, 40, 92);
	}

	/**
	 * Draw a window, given its center.
	 * 
	 * @param gl OpenGL object
	 * @param dx X-coordinate
	 * @param dy Y-coordinate
	 * @param ww Width
	 * @param hh Height
	 * @param redValue Red color scheme
	 * @param greenValue Green color scheme
	 * @param blueValue Blue color scheme
	 */
	private void	drawWindow(GL2 gl, int dx, int dy, int ww, int hh,
			int redValue, int greenValue, int blueValue)
	{
		// Set window and fill the window.
		setColor(gl, redValue, greenValue, blueValue);
		fillRect(gl, dx - ww, dy - hh, 2 * ww, 2 * hh);

		// Black color edge.drawShades(gl, dx + 14, dy + 107, 20, 40, 118, 219, 219, 0);
		setColor(gl, 0, 0, 0);
		edgeRect(gl, dx - ww, dy - hh, 2 * ww, 2 * hh);
	}

	//**********************************************************************
	// Private Methods (Scene, Fence)
	//**********************************************************************

	private void	drawFences(GL2 gl)
	{
		// Draw a zigzag fence with 8 boards
		fillFenceStrip(gl, 283, 132, 8);
		edgeFenceStrip(gl, 283, 132, 8);

		// Draw a zigzag fence with 4 boards
		fillFenceStrip(gl, 12, 132, 4);
		edgeFenceStrip(gl, 12, 132, 4);

		// Draw a rightward-increasing jagged fence
		fillFenceBoard(gl, false,  1024, 132);
		edgeFenceBoard(gl, false,  1024, 132);
		fillFenceBoard(gl, false,  1001, 132);
		edgeFenceBoard(gl, false,  1001, 132);
		fillFenceBoard(gl, false,  978, 132);
		edgeFenceBoard(gl, false,  978, 132);
		fillFenceBoard(gl, false,  955, 132);
		edgeFenceBoard(gl, false,  955, 132);
		fillFenceBoard(gl, false,  932, 132);
		edgeFenceBoard(gl, false,  932, 132);
		fillFenceBoard(gl, false,  909, 132);
		edgeFenceBoard(gl, false,  909, 132);
		fillFenceBoard(gl, false,  886, 132);
		edgeFenceBoard(gl, false,  886, 132);
		fillFenceBoard(gl, false,  863, 132);
		edgeFenceBoard(gl, false,  863, 132);
		fillFenceBoard(gl, false,  1224, 132);
		edgeFenceBoard(gl, false,  1224, 132);
		fillFenceBoard(gl, false,  1247, 132);
		edgeFenceBoard(gl, false,  1247, 132);
	}

	// Fills a left-to-right sequence of fence boards using a QUAD_STRIP.
	private void	fillFenceStrip(GL2 gl, int dx, int dy, int boards)
	{
		setColor(gl, 192, 192, 128);			// Tan

		gl.glBegin(GL2.GL_QUAD_STRIP);

		gl.glVertex2i(dx + 0, dy + 0);		// base, leftmost slat
		gl.glVertex2i(dx + 0, dy + 102);	// peak, leftmost slat

		for (int i=1; i<=boards; i++)
		{
			int	x = i * 24;
			int	y = ((i % 2 == 1) ? 112 : 102);

			gl.glVertex2i(dx + x, dy + 0);	// base, next slat
			gl.glVertex2i(dx + x, dy + y);	// peak, next slat
		}

		gl.glEnd();
	}

	// Edges a left-to-right sequence of fence boards using LINE_LOOPs.
	private void	edgeFenceStrip(GL2 gl, int dx, int dy, int boards)
	{
		setColor(gl, 0, 0, 0);					// Black

		gl.glLineWidth(thickline);

		for (int i=0; i<boards; i++)
		{
			int	xl = i * 24;
			int	xr = xl + 24;
			int	yl = ((i % 2 == 0) ? 102 : 112);
			int	yr = ((i % 2 == 0) ? 112 : 102);

			gl.glBegin(GL2.GL_LINE_LOOP);

			gl.glVertex2i(dx + xl, dy + 0);	// base, left
			gl.glVertex2i(dx + xr, dy + 0);	// base, right
			gl.glVertex2i(dx + xr, dy + yr);	// peak, right
			gl.glVertex2i(dx + xl, dy + yl);	// peak, left

			gl.glEnd();
		}

		gl.glLineWidth(1.0f);
	}

	// Define four corners of a fence board that is shorter on the left side.
	private static final Point[]	OUTLINE_BOARD_L = new Point[]
	{
		new Point(  0,   0),		// base, left
		new Point( 24,   0),		// base, right
		new Point( 24, 112),		// peak, right
		new Point(  0, 102),		// peak, left
	};

	// Define four corners of a fence board that is shorter on the right side.
	private static final Point[]	OUTLINE_BOARD_R = new Point[]
	{
		new Point(  0,   0),		// base, left
		new Point( 24,   0),		// base, right
		new Point( 24, 102),		// peak, right
		new Point(  0, 112),		// peak, left
	};

	// Fills a single fence slat with bottom left corner at dx, dy.
	// If flip is true, the slat is higher on the left, else on the right.
	private void	fillFenceBoard(GL2 gl, boolean flip, int dx, int dy)
	{
		setColor(gl, 192, 192, 128);			// Tan
		fillPoly(gl, dx, dy, (flip ? OUTLINE_BOARD_R : OUTLINE_BOARD_L));
	}

	// Edges a single fence slat with bottom left corner at dx, dy.
	// If flip is true, the slat is higher on the left, else on the right.
	private void	edgeFenceBoard(GL2 gl, boolean flip, int dx, int dy)
	{
		setColor(gl, 0, 0, 0);					// Black
		edgePoly(gl, dx, dy, (flip ? OUTLINE_BOARD_R : OUTLINE_BOARD_L));
	}

	//**********************************************************************
	// Private Methods (Scene, Kite)
	//**********************************************************************

	private static final int		SIDES_KITE = 18;
	private static final double	ANGLE_KITE = 2.0 * Math.PI / SIDES_KITE;
	
	/**
	 * Draws a kite consisting of two fans, one upper blue, one lower red.
	 * 
	 * @param gl OpenGL object
	 */
	private void	drawKite(GL2 gl)
	{
		int		cx = 956;
		int		cy = 490;
		int		r = 80;

		double		amin =  4.0 * ANGLE_KITE;
		double		amax =  9.0 * ANGLE_KITE;
		double		bmin = 13.0 * ANGLE_KITE;
		double		bmax = 18.0 * ANGLE_KITE;

		int		fans = 5;
		double		astep = (amax - amin) / fans;
		double		bstep = (bmax - bmin) / fans;

		// Fill and edge the lower red fan
		fillKiteFan(gl, cx, cy, fans, r, bmin, bstep, 224, 80, 48);
		edgeKiteFan(gl, cx, cy, fans, r, bmin, bstep);

		for (int i=0; i<fans; i++)
		{
			double	a = amin + astep * i;

			// Fill and edge each upper blue fan blade
			fillKiteBlade(gl, cx, cy, r, a, a + astep);
			edgeKiteBlade(gl, cx, cy, r, a, a + astep);
		}
	}
	
	/**
	 * Fills an entire kite fan using a TRIANGLE_FAN.
	 * 
	 * @param gl OpenGL object
	 * @param cx X-coordinate
	 * @param cy Y-coordinate
	 * @param fans How much division on the triangle
	 * @param r Radius of the triangle
	 * @param min Minimum value for steps
	 * @param step How much steps to take
	 * @param redValue Red color scheme
	 * @param greenValue Green color scheme
	 * @param blueValue Blue color scheme
	 */
	private void	fillKiteFan(GL2 gl, int cx, int cy, int fans, int r,
								double min, double step, 
								int redValue, int greenValue, int blueValue)
	{
		setColor(gl, redValue, greenValue, blueValue);

		gl.glBegin(GL2.GL_TRIANGLE_FAN);

		gl.glVertex2d(cx, cy);

		for (int i=0; i<=fans; i++)
		{
			double	a = min + step * i;

			gl.glVertex2d(cx + r * Math.cos(a), cy + r * Math.sin(a));
		}

		gl.glEnd();
	}

	// Edges an entire kite fan using a LINE_LOOPs.
	private void	edgeKiteFan(GL2 gl, int cx, int cy, int fans, int r,
								double min, double step)
	{
		setColor(gl, 0, 0, 0);					// Black

		gl.glLineWidth(thickline);

		double	a = min;

		for (int i=0; i<fans; i++)
		{
			gl.glBegin(GL.GL_LINE_LOOP);

			gl.glVertex2d(cx, cy);
			gl.glVertex2d(cx + r * Math.cos(a), cy + r * Math.sin(a));
			a += step;
			gl.glVertex2d(cx + r * Math.cos(a), cy + r * Math.sin(a));

			gl.glEnd();
		}

		gl.glLineWidth(1.0f);
	}

	// Fills a single kite fan blade using a POLYGON.
	private void	fillKiteBlade(GL2 gl, int cx, int cy, int r,
								  double a1, double a2)
	{
		setColor(gl, 48, 80, 224);				// Bright blue

		gl.glBegin(GL2.GL_POLYGON);

		gl.glVertex2d(cx, cy);
		gl.glVertex2d(cx + r * Math.cos(a1), cy + r * Math.sin(a1));
		gl.glVertex2d(cx + r * Math.cos(a2), cy + r * Math.sin(a2));

		gl.glEnd();
	}

	// Edges a single kite fan blade using a LINE_LOOP.
	private void	edgeKiteBlade(GL2 gl, int cx, int cy, int r,
								  double a1, double a2)
	{
		setColor(gl, 0, 0, 0);					// Black

		gl.glLineWidth(thickline);

		gl.glBegin(GL.GL_LINE_LOOP);

		gl.glVertex2d(cx, cy);
		gl.glVertex2d(cx + r * Math.cos(a1), cy + r * Math.sin(a1));
		gl.glVertex2d(cx + r * Math.cos(a2), cy + r * Math.sin(a2));

		gl.glEnd();

		gl.glLineWidth(1.0f);
	}

	//**********************************************************************
	// Private Methods (Utility Functions)
	//**********************************************************************
	
	private void	setColor(GL2 gl, int r, int g, int b, int a)
	{
		gl.glColor4f(r / 255.0f, g / 255.0f, b / 255.0f, a / 255.0f);
	}

	// Sets fully opaque color, normalizing r, g, b values from max 255 to 1.0.
	private void	setColor(GL2 gl, int r, int g, int b)
	{
		setColor(gl, r, g, b, 255);
	}
	
	/**
	 * Fills a rectangle having lower left corner at (x,y) and dimensions (w,h).
	 * 
	 * @param gl OpenGL object
	 * @param x X-coordinate starting
	 * @param y Y-coordinate starting
	 * @param w Width
	 * @param h Height
	 */
	private void	fillRect(GL2 gl, int x, int y, int w, int h)
	{
		gl.glBegin(GL2.GL_POLYGON);

		gl.glVertex2i(x+0, y+0);
		gl.glVertex2i(x+0, y+h);
		gl.glVertex2i(x+w, y+h);
		gl.glVertex2i(x+w, y+0);

		gl.glEnd();
	}
	
	/**
	 * Edges a rectangle having lower left corner at (x,y) and dimensions (w,h).
	 * 
	 * @param gl OpenGL object
	 * @param x X-coordinate starting
	 * @param y Y-coordinate starting
	 * @param w Width
	 * @param h Height
	 */
	private void	edgeRect(GL2 gl, int x, int y, int w, int h)
	{
		gl.glLineWidth(thickline);

		gl.glBegin(GL.GL_LINE_LOOP);

		gl.glVertex2i(x+0, y+0);
		gl.glVertex2i(x+0, y+h);
		gl.glVertex2i(x+w, y+h);
		gl.glVertex2i(x+w, y+0);

		gl.glEnd();

		gl.glLineWidth(1.0f);
	}
	
	/**
	 * Fills in a triangle given (x,y) coordinates given base and height.
	 * Creates an upside down triangle.
	 * 
	 * @param gl OpenGL object
	 * @param x X-coordinate
	 * @param y Y-coordinate
	 * @param base Base of the triangle
	 * @param height Height of the triangle
	 * @param rightOrLeft 0 or 1. 0 denotes left while 1 denotes right
	 */
	private void	fillTriangle(GL2 gl, int x, int y, int base, int height,
			int rightOrLeft)
	{
		gl.glBegin(GL2.GL_TRIANGLES);
		
		if (rightOrLeft == 0)
		{
			gl.glVertex2f(x+base, y+height);
			gl.glVertex2f(x, y+height);
			gl.glVertex2f(x+0, y+0);
		}
		else if (rightOrLeft == 1)
		{
			gl.glVertex2f(x+0, y+height);
			gl.glVertex2f(x+base, y+height);
			gl.glVertex2f(x+base, y+0);
		}
		
		gl.glEnd();
	}
	
	/**
	 * Fills in a triangle given (x,y) coordinates given base and height.
	 * 
	 * @param gl OpenGL object
	 * @param x X-coordinate
	 * @param y Y-coordinate
	 * @param base Base of the triangle
	 * @param height Height of the triangle
	 * @param rightOrLeft 0 or 1. 0 denotes left while 1 denotes right
	 */
	private void	edgeTriangle(GL2 gl, int x, int y, int base, int height,
			int rightOrLeft)
	{
		gl.glLineWidth(thickline);

		gl.glBegin(GL.GL_LINE_LOOP);

		if (rightOrLeft == 0)
		{
			gl.glVertex2f(x+base, y+height);
			gl.glVertex2f(x, y+height);
			gl.glVertex2f(x+0, y+0);
		}
		else if (rightOrLeft == 1)
		{
			gl.glVertex2f(x+0, y+height);
			gl.glVertex2f(x+base, y+height);
			gl.glVertex2f(x+base, y+0);
		}
		
		gl.glEnd();

		gl.glLineWidth(1.0f);
	}
	
	/**
	 * Fills in a circle having a center a (x,y) and a radius r.
	 * Code came from a YouTube video https://www.youtube.com/watch?v=NnutNkde5TE
	 * 
	 * @param gl OpenGL object
	 * @param x X-coordinate starting
	 * @param y Y-coordinate starting
	 * @param r Radius of the circle
	 */
	private void	fillCircle(GL2 gl, int x, int y, int r)
	{
		gl.glBegin(GL2.GL_POLYGON);
		
		// Calculation to get the circle.
		float theta;
		
		for (int i = 0; i < 360; i++)
		{
			theta = (float) (i * 3.142/180);
			
			gl.glVertex2f((float) (x + r * Math.cos(theta)), 
					(float) (y + r * Math.sin(theta)));
		}
		
		gl.glEnd();
	}
	
	/**
	 * Edges of the circle with coordinates (x,y) and a radius r.
	 * 
	 * @param gl OpenGL object
	 * @param x X-coordinate starting
	 * @param y Y-coordinate starting
	 * @param r Radius of the circle
	 */
	private void	edgeCircle(GL2 gl, int x, int y, int r)
	{
		gl.glLineWidth(thickline);

		gl.glBegin(GL.GL_LINE_LOOP);

		// Calculation to get the circle.
		float theta;
		
		for (int i = 0; i < 360; i++)
		{
			theta = (float) (i * 3.142/180);
			
			gl.glVertex2f((float) (x + r * Math.cos(theta)), 
					(float) (y + r * Math.sin(theta)));
		}
		
		gl.glEnd();

		gl.glLineWidth(1.0f);
	}

	/**
	 * Fills a polygon defined by a starting point and a sequence of offsets.
	 * 
	 * @param gl OpenGL object
	 * @param startx X-coordinate starting
	 * @param starty Y-coordinate starting
	 * @param offsets How much to offset
	 */
	private void	fillPoly(GL2 gl, int startx, int starty, Point[] offsets)
	{
		gl.glBegin(GL2.GL_POLYGON);

		for (int i=0; i<offsets.length; i++)
			gl.glVertex2i(startx + offsets[i].x, starty + offsets[i].y);

		gl.glEnd();
	}

	/**
	 * Edges a polygon defined by a starting point and a sequence of offsets.
	 * 
	 * @param gl OpenGL object
	 * @param startx X-coordinate starting
	 * @param starty Y-coordinate starting
	 * @param offsets How much to offset
	 */
	private void	edgePoly(GL2 gl, int startx, int starty, Point[] offsets)
	{
		gl.glLineWidth(thickline);

		gl.glBegin(GL2.GL_LINE_LOOP);

		for (int i=0; i<offsets.length; i++)
			gl.glVertex2i(startx + offsets[i].x, starty + offsets[i].y);

		gl.glEnd();

		gl.glLineWidth(1.0f);
	}
}

//******************************************************************************
